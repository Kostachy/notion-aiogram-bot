import asyncio
import logging
import os

from aiogram import Bot, F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message

from config import settings
from db.crud.user_crud import UserCrud
from notion_client import APIResponseError
from notion.notion_api import notion_client
from openai_api.api import openai_client, update_assistant
from utils import get_notion_db_id
from assemblyai_api.api import assemblyai_helper

# from aiogram.fsm.context import FSMContext
# from states.user_states import UserStates


router = Router()


@router.message(CommandStart())
async def get_start(message: Message):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —é–∑–µ—Ä–∞"""
    if not await UserCrud.get_user_id(message.from_user.id):
        await UserCrud.create_user(user_id=message.from_user.id)
        await message.answer('–í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!‚úÖ\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ Notion')
    else:
        await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')


@router.message(F.text.regexp(r'https://www\.notion\.so/[a-f\d]+\?v=[a-f\d]+&pvs=\d+'))
async def get_notion_db_link_and_tasks(message: Message):
    """–î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ notion –≤ –±–¥"""
    db_id = get_notion_db_id(message.text)
    await UserCrud.update_db_link(user_id=message.from_user.id, db_link=db_id)
    await message.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É")


@router.message(F.text == "OpenAi update")
async def openai_update(message: Message):
    """–°–µ—Ä–≤–∏—Å–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ–∏—á–∞"""
    await update_assistant()
    await message.answer("OK")


@router.message(F.voice)
async def get_opneai_help(message: Message, bot: Bot):
    """–°–Ω–∞—á–∞–ª–∞ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º thread_id –∏–∑ –±–¥, –µ—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏–º —Ç–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏ –¥–æ–±–æ–≤–ª—è–µ–º –≤ –±–¥.
    –î–∞–ª–µ–µ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —á—Ç–æ –∏–º–µ–µ—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Notion –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
    –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ OpenAI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É —Å –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º Notion –∏ —Å –Ω–æ–≤–æ–π —Ç–∞—Å–∫–ª–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –∑–∞–∫–∏–¥—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ Notion"""
    voice = await bot.get_file(file_id=message.voice.file_id)
    file_path = f"./tmp/voice/{voice.file_id}.mp3"
    await bot.download_file(voice.file_path, destination=file_path)
    audio_text = assemblyai_helper.get_text_from_voice(audio_url=file_path)
    await message.answer(f"–í–∞—à–∞ –∑–∞–¥–∞—á–∞: {audio_text}")
    os.remove(file_path)

    if not await UserCrud.get_thread_id(user_id=message.from_user.id):
        thread = await openai_client.beta.threads.create()
        thread_id = thread.id
        await UserCrud.update_thread_id(thread_id=thread_id, user_id=message.from_user.id)
        logging.info('Created thread %s', thread_id)
    else:
        thread_id = await UserCrud.get_thread_id(user_id=message.from_user.id)
        logging.info('Get thread %s', thread_id)

    notion_db_id = await UserCrud.get_database_id(user_id=message.from_user.id)
    notion_db = await notion_client.read_db(database_id=notion_db_id)

    list_of_existing_tasks = []
    for row in notion_db:
        list_of_existing_tasks.append(f"{row['task_name']}|{row['start_date']}|{row['end_date']}")

    await openai_client.beta.threads.messages.create(
        thread_id=thread_id,
        role="user",
        content=f"Existing tasks in the notion: {', '.join(map(str, list_of_existing_tasks))}. Here's a new task: {audio_text}"
    )
    run = await openai_client.beta.threads.runs.create(
        thread_id=thread_id,
        assistant_id=settings.ASSISTANT_ID
    )

    while run.status not in ["completed", "failed", "requires_action"]:
        run = await openai_client.beta.threads.runs.retrieve(
            thread_id=thread_id,
            run_id=run.id
        )
        await asyncio.sleep(5)
        logging.info("Run status: %s", run.status)

    messages = await openai_client.beta.threads.messages.list(
        thread_id=thread_id,
        order="desc"
    )

    formatted_task = messages.data[0].content[0].text.value.replace('"', '').split('|')
    logging.info("Formatted task!: %s", formatted_task)

    task_name = formatted_task[0]
    start_date = formatted_task[1]
    end_date = formatted_task[2]

    try:
        await notion_client.write_row_in_notion(database_id=notion_db_id,
                                                task_name=task_name,
                                                start_date=start_date,
                                                end_date=end_date)

        await message.answer("‚úÖ–í–∞—à–∞ –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞‚úÖ")
    except APIResponseError:
        await message.answer("–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò∞\n–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤–∞—à–∞ –±–¥ –≤ Notion —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É")


@router.message()
async def any_message(message: Message):
    """–•—ç–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ª—é–±–æ–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer("...")
